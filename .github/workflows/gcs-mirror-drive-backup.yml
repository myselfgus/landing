# Este workflow automatiza o backup e espelhamento do repositório.
# A cada push na branch 'main', ele executa duas tarefas principais:
# 1. GCS Mirror: Sincroniza o código para um bucket no Google Cloud Storage.
#    - Uma cópia "latest" para uso operacional.
#    - Uma cópia versionada (snapshot .tar.gz) para histórico imutável.
# 2. Drive Snapshot: Envia o mesmo snapshot .tar.gz para um Shared Drive no Google Drive.
#    - Serve como um backup visual e de fácil acesso para humanos.

name: 'CI: Mirror Code to GCS and Backup to Drive'

"on":
  push:
    branches: [ "main" ]
  workflow_dispatch: # Permite acionar manualmente pela UI do GitHub

env:
  GCS_BUCKET: voither-code-mirror # Bucket principal para código
  DRIVE_REMOTE: 'VAULT' # Nome do remote do rclone para o Shared Drive
  DRIVE_PATH: 'artefatos/versions' # Pasta de destino no Shared Drive

jobs:
  mirror-and-backup:
    name: Mirror & Backup
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para obter histórico completo

      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Verify GCS bucket access'
        run: |
          echo "Verificando acesso ao bucket GCS..."
          gsutil ls gs://${{ env.GCS_BUCKET }}/ || {
            echo "Erro: Não foi possível acessar o bucket ${{ env.GCS_BUCKET }}"
            exit 1
          }

      - name: 'Upload "latest" version to GCS'
        uses: 'google-github-actions/upload-cloud-storage@v2'
        with:
          path: '.'
          destination: '${{ env.GCS_BUCKET }}/${{ github.event.repository.name }}/latest'
          parent: false
          process_gcloudignore: false # Garante que arquivos como .env.example sejam incluídos
          glob: '**/*'
          predefinedAcl: 'private'

      - name: 'Create Versioned Snapshot'
        id: snapshot
        run: |
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H%M%SZ")
          SHORT_SHA=$(git rev-parse --short HEAD)
          FILENAME="${{ github.event.repository.name }}-${TIMESTAMP}_${SHORT_SHA}.tar.gz"
          
          echo "Creating snapshot: ${FILENAME}"
          
          # Cria snapshot excluindo arquivos listados no .gitignore e outros desnecessários
          tar --exclude-from=.gitignore \
              --exclude='.git' \
              --exclude='node_modules' \
              --exclude='dist' \
              --exclude='*.log' \
              -czf "${FILENAME}" .
          
          # Verifica se o arquivo foi criado com sucesso
          if [ ! -f "${FILENAME}" ]; then
            echo "Erro: Falha ao criar o snapshot"
            exit 1
          fi
          
          # Mostra informações do arquivo criado
          ls -lh "${FILENAME}"
          echo "filename=${FILENAME}" >> $GITHUB_OUTPUT

      - name: 'Upload Versioned Snapshot to GCS'
        uses: 'google-github-actions/upload-cloud-storage@v2'
        with:
          path: '${{ steps.snapshot.outputs.filename }}'
          destination: '${{ env.GCS_BUCKET }}/${{ github.event.repository.name }}/versions'
          parent: false
          predefinedAcl: 'private'

      - name: 'Setup Rclone for Google Drive'
        if: ${{ secrets.RCLONE_CONF != '' }} # Só executa se o segredo do rclone existir
        run: |
          echo "Instalando e configurando rclone..."
          sudo apt-get update && sudo apt-get install -y rclone
          
          # Criar diretório de configuração
          mkdir -p ~/.config/rclone
          
          # Decodificar e salvar configuração do rclone
          echo "${{ secrets.RCLONE_CONF }}" | base64 -d > ~/.config/rclone/rclone.conf
          
          # Verificar se a configuração foi salva corretamente
          if [ ! -s ~/.config/rclone/rclone.conf ]; then
            echo "Erro: Configuração do rclone não foi criada corretamente"
            exit 1
          fi
          
          # Testar conectividade com o remote
          rclone listremotes | grep -q "${{ env.DRIVE_REMOTE }}" || {
            echo "Erro: Remote '${{ env.DRIVE_REMOTE }}' não encontrado na configuração"
            exit 1
          }

      - name: 'Upload Snapshot to Google Drive VAULT'
        if: ${{ secrets.RCLONE_CONF != '' }}
        run: |
          echo "Fazendo upload do snapshot para Google Drive..."
          
          # Verifica se o arquivo existe
          if [ ! -f "${{ steps.snapshot.outputs.filename }}" ]; then
            echo "Erro: Arquivo de snapshot não encontrado"
            exit 1
          fi
          
          # Realiza o upload com progresso e verificação
          rclone copy --progress --check-first --verbose \
            '${{ steps.snapshot.outputs.filename }}' \
            '${{ env.DRIVE_REMOTE }}:${{ github.event.repository.name }}/${{ env.DRIVE_PATH }}/'
          
          # Verifica se o upload foi bem-sucedido
          rclone ls '${{ env.DRIVE_REMOTE }}:${{ github.event.repository.name }}/${{ env.DRIVE_PATH }}/' | \
            grep -q '${{ steps.snapshot.outputs.filename }}' && \
            echo "✅ Upload para Google Drive concluído com sucesso" || \
            echo "⚠️  Aviso: Não foi possível verificar o upload no Google Drive"

      - name: 'Cleanup temporary files'
        if: always()
        run: |
          echo "Limpando arquivos temporários..."
          rm -f ${{ steps.snapshot.outputs.filename }} || true
          rm -f ~/.config/rclone/rclone.conf || true

      - name: 'Create deployment summary'
        if: success()
        run: |
          echo "## 🚀 Mirror & Backup Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Operações Realizadas:" >> $GITHUB_STEP_SUMMARY
          echo "- **GCS Latest**: Código sincronizado para \`gs://${{ env.GCS_BUCKET }}/${{ github.event.repository.name }}/latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **GCS Version**: Snapshot versionado salvo em \`gs://${{ env.GCS_BUCKET }}/${{ github.event.repository.name }}/versions\`" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ secrets.RCLONE_CONF }}" != "" ]; then
            echo "- **Google Drive**: Backup enviado para \`${{ env.DRIVE_REMOTE }}:${{ github.event.repository.name }}/${{ env.DRIVE_PATH }}/\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Google Drive**: ⚠️ Configuração não disponível (RCLONE_CONF não definido)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Detalhes do Snapshot:" >> $GITHUB_STEP_SUMMARY
          echo "- **Arquivo**: \`${{ steps.snapshot.outputs.filename }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`$(git rev-parse --short HEAD)\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: \`$(date -u +"%Y-%m-%d %H:%M:%S UTC")\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links Úteis:" >> $GITHUB_STEP_SUMMARY
          echo "- [Google Cloud Console](https://console.cloud.google.com/storage/browser/${{ env.GCS_BUCKET }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY